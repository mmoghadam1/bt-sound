{"version":3,"sources":["Display.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","audio","Howl","src","chirp","play","state","etDevice","console","log","navigator","bluetooth","requestDevice","acceptAllDevices","then","device","setState","_","gatt","connect","className","Button","variant","onClick","this","handleClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0RAMqBA,G,8DACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,MAAQ,IAAIC,OAAK,CACbC,IAAK,CAAC,mBARS,EAWnBC,MAAQ,WACJ,EAAKH,MAAMI,QAVX,EAAKC,MAAQ,CACTC,SAAU,GACVF,MAAM,GAJK,E,0DAgBL,IAAD,OACTG,QAAQC,IAAI,sCAIZ,OAAOC,UAAUC,UAAUC,cAHb,CACVC,kBAAkB,IAGjBC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACT,SAAUQ,OAE5BD,MAAK,SAAAG,GAAC,OAAI,EAAKX,MAAMC,SAASW,KAAKC,e,+BAGlC,IAAD,OACL,OACI,6BACI,wBAAIC,UAAU,WAAd,WACJ,yBAAKA,UAAU,kBACX,qCACA,uEACJ,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UACRC,QAASC,KAAKpB,OADtB,UAMA,yBAAKgB,UAAU,kBACX,yCACA,oFACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UACZC,QAAS,kBAAM,EAAKE,gBADxB,iB,GA7CqBC,IAAMC,YCG5BC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.38bf6884.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {Howl, Howler} from 'howler';\nimport AudioPlayer from 'react-h5-audio-player';\nimport './Display.css'\n\nexport default class Display extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            etDevice: \"\",\n            play: false\n        };\n    }\n    audio = new Howl({\n        src: ['audio50ms.wav']\n    })\n\n    chirp = () => {\n        this.audio.play()\n    }\n    \n\n    handleClick(){\n        console.log('Requesting any Bluetooth Device...');\n        let options = {\n            acceptAllDevices: true\n        };\n        return navigator.bluetooth.requestDevice(options)\n            .then(device => {\n                this.setState({etDevice: device});\n            })\n            .then(_ => this.state.etDevice.gatt.connect());\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className='Display'>Welcome</h1>\n            <div className='Display-header'>\n                <h2>Audio</h2>\n                <p>This is a 50ms sample of audio aat 22kHz</p>\n            <Button variant=\"primary\"\n                    onClick={this.chirp}\n                >\n                Chirp\n                </Button>\n            </div>\n            <div className='Display-header'>\n                <h2>Bluetooth</h2>\n                <p>Click to connect your bluetooth device to the browser</p>\n                <Button variant=\"primary\"\n                    onClick={() => this.handleClick()}\n                >\n                Connect\n                </Button>\n                </div>\n            </div>\n\n          \n        );\n    }\n}","import React from 'react';\nimport Display from './Display';\n\nfunction App() {\n  return (\n    <Display></Display>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport 'react-h5-audio-player/lib/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}