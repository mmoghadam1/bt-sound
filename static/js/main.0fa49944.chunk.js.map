{"version":3,"sources":["Navigation.js","RX.js","Bluetooth.js","Audio.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Display","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","React","Component","RX","props","state","device","this","setState","items","i","h","push","Dropdown","Item","console","log","device_name","name","Accordion","Card","as","Header","eventKey","Body","ButtonGroup","Button","variant","style","pointerEvents","split","Menu","populateChannels","float","width","RXRender","Bluetooth","rx_device","navigator","bluetooth","requestDevice","acceptAllDevices","then","gatt","connect","onClick","handleClick","checkConnected","audio","Howl","src","chirp","play","Routes","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fa49944.chunk.js","sourcesContent":["import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nexport default class Display extends React.Component{\n\n\n    render(){\n        return(\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"bluetooth\">Bluetooth</Nav.Link>\n                    <Nav.Link href=\"audio\">Audio</Nav.Link>\n                    </Nav>\n                    \n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport './Display.css'\n\nexport default class RX extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            device: props.device\n        };\n    }\n    componentWillReceiveProps({device}) {\n        this.setState({...this.state,device})\n      }\n    populateChannels () {\n        let items = []\n        for(let i = 0; i < 38; i++){\n            let h = \"#/action-\"+ i\n            items.push(<Dropdown.Item href={ h } >{ i }</Dropdown.Item>)\n        }\n        return items\n    }\n    \n    RXRender () {\n        console.log(this.state.device)\n        if (this.state.device !== null){\n            let device_name = this.state.device.device.name\n\n            return (\n                <div>\n                    <br />\n                    <div>Connected to { device_name }</div> \n                    <br />\n                    <Accordion className='Accordian'>\n                        <Card>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                                Click to configure reciever\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"0\">\n                                <Card.Body>\n                                <Dropdown as={ButtonGroup}>\n                                    <Button variant=\"success\" style={{pointerEvents: 'none'}}>Channel</Button>\n                                    <Dropdown.Toggle split variant=\"success\" id=\"dropdown-split-basic\" />\n                                    <Dropdown.Menu>\n                                        { this.populateChannels() }\n                                    </Dropdown.Menu>\n                                </Dropdown>{' '}\n                                <div style={{float:'right'}}>Here we are</div>\n                                <br />\n                                <Dropdown as={ButtonGroup}>\n                                    <Button variant=\"success\" style={{pointerEvents: 'none'}} >PHY</Button>\n                                    <Dropdown.Toggle split variant=\"success\" id=\"dropdown-split-basic\" />\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n                                        <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n                                        <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n                                    </Dropdown.Menu>\n                                    </Dropdown>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                    <Accordion className='Accordian' style={{float:'right'}, {width:'360px'}}>\n                        <Card style={{width:'360px'}}>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                                Click to configure transmitter\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"0\">\n                                <Card.Body>\n                                <Dropdown as={ButtonGroup}>\n                                    <Button variant=\"success\" style={{pointerEvents: 'none'}}>Channel</Button>\n                                    <Dropdown.Toggle split variant=\"success\" id=\"dropdown-split-basic\" />\n                                    <Dropdown.Menu>\n                                        { this.populateChannels() }\n                                    </Dropdown.Menu>\n                                </Dropdown>{' '}\n                                <div style={{float:'right'}}>Here we are</div>\n                                <br />\n                                <Dropdown as={ButtonGroup}>\n                                    <Button variant=\"success\" style={{pointerEvents: 'none'}} >PHY</Button>\n                                    <Dropdown.Toggle split variant=\"success\" id=\"dropdown-split-basic\" />\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n                                        <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n                                        <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n                                    </Dropdown.Menu>\n                                    </Dropdown>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                    <br /> <br />\n                    <div>\n                        <Button variant='primary'>\n                            Send Message\n                        </Button>{' '}\n                        <Button variant='primary'>\n                            Record data\n                        </Button>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return <div></div>\n        }\n    }\n\n    render() {\n        console.log(\"WERE IN HERE44\")\n        return (\n            this.RXRender()\n        );\n    }\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport RX from './RX';\n\nexport default class Bluetooth extends React.Component{\n    constructor(props) {\n        super(props);\n        let node = {\n            device:{\n                name:\"test\"\n            }\n        }\n        this.state = {\n            rx_device: null\n        };\n    }\n    handleClick(){\n        console.log('Requesting any Bluetooth Device...');\n        let options = {\n            acceptAllDevices: true\n        };\n        return navigator.bluetooth.requestDevice(options)\n            .then(device => device.gatt.connect())\n            .then(device => this.setState({rx_device: device }))\n    }\n    checkConnected() {\n        if (this.state.device == null)\n            return(\n                    <div>\n\n                        <p>Click to connect your bluetooth device to the browser</p>\n                        <Button variant=\"primary\" onClick={() => this.handleClick()}>\n                            Connect\n                        </Button>{' '}\n                    </div>\n            )\n        else\n            return (\n                <div>\n                    <RX device={this.state.rx_device} />\n                </div>\n            )\n    }\n\n    render () {\n        console.log('HERWE any Bluetooth Device...');\n        return (\n            this.checkConnected()\n        );\n    }\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {Howl, Howler} from 'howler';\nimport './Display.css'\n\nexport default class Display extends React.Component{\n    audio = new Howl({\n        src: ['audio50ms.wav']\n    })\n\n    chirp = () => {\n        this.audio.play()\n    }\n    render() {\n        return (\n        <div className='Display-header'>\n            <h2>Audio</h2>\n            <p>This is a 50ms sample of audio at 22kHz</p>\n            <Button variant=\"primary\" onClick={this.chirp}>\n                Chirp\n            </Button>\n        </div>\n        );\n    }\n}","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Bluetooth from \"./Bluetooth\";\nimport Audio from \"./Audio\";\n\nexport default class Routes extends React.Component {\n    render() {\n        return (\n            <Router>\n              {/* A <Switch> looks through its children <Route>s and\n                  renders the first one that matches the current URL. */}\n              <Switch>\n                <Route path=\"/bluetooth\">\n                  <Bluetooth />\n                </Route>\n                <Route path=\"/audio\">\n                  <Audio />\n                </Route>\n              </Switch>\n            \n          </Router>\n        )\n    }\n}\n\n//   <Route path=\"/\" exact component={Home} />","import React from 'react';\nimport Navigation from './Navigation';\nimport Routes from './Routes';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nexport default function App() {\n  return (\n    <Router>\n        <div className=\"App\">\n            <Navigation />\n            <Routes />\n        </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport 'react-h5-audio-player/lib/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}